package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/ritchida/jobber/generated/jobber/models"
)

/*UpdateJobAccepted Accepted

swagger:response updateJobAccepted
*/
type UpdateJobAccepted struct {
}

// NewUpdateJobAccepted creates UpdateJobAccepted with default headers values
func NewUpdateJobAccepted() *UpdateJobAccepted {
	return &UpdateJobAccepted{}
}

// WriteResponse to the client
func (o *UpdateJobAccepted) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(202)
}

/*UpdateJobDefault error

swagger:response updateJobDefault
*/
type UpdateJobDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateJobDefault creates UpdateJobDefault with default headers values
func NewUpdateJobDefault(code int) *UpdateJobDefault {
	if code <= 0 {
		code = 500
	}

	return &UpdateJobDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the update job default response
func (o *UpdateJobDefault) WithStatusCode(code int) *UpdateJobDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the update job default response
func (o *UpdateJobDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the update job default response
func (o *UpdateJobDefault) WithPayload(payload *models.Error) *UpdateJobDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update job default response
func (o *UpdateJobDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateJobDefault) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
