package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/ritchida/jobber/generated/jobber/models"
)

/*AddJobMessageAccepted Accepted

swagger:response addJobMessageAccepted
*/
type AddJobMessageAccepted struct {
}

// NewAddJobMessageAccepted creates AddJobMessageAccepted with default headers values
func NewAddJobMessageAccepted() *AddJobMessageAccepted {
	return &AddJobMessageAccepted{}
}

// WriteResponse to the client
func (o *AddJobMessageAccepted) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(202)
}

/*AddJobMessageDefault Error

swagger:response addJobMessageDefault
*/
type AddJobMessageDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddJobMessageDefault creates AddJobMessageDefault with default headers values
func NewAddJobMessageDefault(code int) *AddJobMessageDefault {
	if code <= 0 {
		code = 500
	}

	return &AddJobMessageDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add job message default response
func (o *AddJobMessageDefault) WithStatusCode(code int) *AddJobMessageDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add job message default response
func (o *AddJobMessageDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add job message default response
func (o *AddJobMessageDefault) WithPayload(payload *models.Error) *AddJobMessageDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add job message default response
func (o *AddJobMessageDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddJobMessageDefault) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
