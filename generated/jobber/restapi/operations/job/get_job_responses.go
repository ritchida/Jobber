package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/ritchida/jobber/generated/jobber/models"
)

/*GetJobOK OK

swagger:response getJobOK
*/
type GetJobOK struct {

	// In: body
	Payload *models.Job `json:"body,omitempty"`
}

// NewGetJobOK creates GetJobOK with default headers values
func NewGetJobOK() *GetJobOK {
	return &GetJobOK{}
}

// WithPayload adds the payload to the get job o k response
func (o *GetJobOK) WithPayload(payload *models.Job) *GetJobOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get job o k response
func (o *GetJobOK) SetPayload(payload *models.Job) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetJobOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetJobDefault error

swagger:response getJobDefault
*/
type GetJobDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetJobDefault creates GetJobDefault with default headers values
func NewGetJobDefault(code int) *GetJobDefault {
	if code <= 0 {
		code = 500
	}

	return &GetJobDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get job default response
func (o *GetJobDefault) WithStatusCode(code int) *GetJobDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get job default response
func (o *GetJobDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get job default response
func (o *GetJobDefault) WithPayload(payload *models.Error) *GetJobDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get job default response
func (o *GetJobDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetJobDefault) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
