package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// AddJobMessageHandlerFunc turns a function with the right signature into a add job message handler
type AddJobMessageHandlerFunc func(AddJobMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AddJobMessageHandlerFunc) Handle(params AddJobMessageParams) middleware.Responder {
	return fn(params)
}

// AddJobMessageHandler interface for that can handle valid add job message params
type AddJobMessageHandler interface {
	Handle(AddJobMessageParams) middleware.Responder
}

// NewAddJobMessage creates a new http.Handler for the add job message operation
func NewAddJobMessage(ctx *middleware.Context, handler AddJobMessageHandler) *AddJobMessage {
	return &AddJobMessage{Context: ctx, Handler: handler}
}

/*AddJobMessage swagger:route POST /v1/jobs/{id}/messages job addJobMessage

AddJobMessage add job message API

*/
type AddJobMessage struct {
	Context *middleware.Context
	Handler AddJobMessageHandler
}

func (o *AddJobMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewAddJobMessageParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
