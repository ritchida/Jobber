package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-swagger/go-swagger/client"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/ritchida/jobber/generated/jobber-client/models"
)

// UpdateJobReader is a Reader for the UpdateJob structure.
type UpdateJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the recieved o.
func (o *UpdateJobReader) ReadResponse(response client.Response, consumer httpkit.Consumer) (interface{}, error) {
	switch response.Code() {

	case 202:
		result := NewUpdateJobAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewUpdateJobDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	}
}

// NewUpdateJobAccepted creates a UpdateJobAccepted with default headers values
func NewUpdateJobAccepted() *UpdateJobAccepted {
	return &UpdateJobAccepted{}
}

/*UpdateJobAccepted handles this case with default header values.

Accepted
*/
type UpdateJobAccepted struct {
}

func (o *UpdateJobAccepted) Error() string {
	return fmt.Sprintf("[PATCH /v1/jobs/{id}][%d] updateJobAccepted ", 202)
}

func (o *UpdateJobAccepted) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateJobDefault creates a UpdateJobDefault with default headers values
func NewUpdateJobDefault(code int) *UpdateJobDefault {
	return &UpdateJobDefault{
		_statusCode: code,
	}
}

/*UpdateJobDefault handles this case with default header values.

error
*/
type UpdateJobDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the update job default response
func (o *UpdateJobDefault) Code() int {
	return o._statusCode
}

func (o *UpdateJobDefault) Error() string {
	return fmt.Sprintf("[PATCH /v1/jobs/{id}][%d] updateJob default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateJobDefault) readResponse(response client.Response, consumer httpkit.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
