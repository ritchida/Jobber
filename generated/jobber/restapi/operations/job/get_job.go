package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetJobHandlerFunc turns a function with the right signature into a get job handler
type GetJobHandlerFunc func(GetJobParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetJobHandlerFunc) Handle(params GetJobParams) middleware.Responder {
	return fn(params)
}

// GetJobHandler interface for that can handle valid get job params
type GetJobHandler interface {
	Handle(GetJobParams) middleware.Responder
}

// NewGetJob creates a new http.Handler for the get job operation
func NewGetJob(ctx *middleware.Context, handler GetJobHandler) *GetJob {
	return &GetJob{Context: ctx, Handler: handler}
}

/*GetJob swagger:route GET /v1/job/{id} job getJob

Retrieves a job by ID

*/
type GetJob struct {
	Context *middleware.Context
	Handler GetJobHandler
}

func (o *GetJob) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetJobParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
