package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new job API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
CreateJob create job API
*/
func (a *Client) CreateJob(params *CreateJobParams) (*CreateJobAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJobParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "createJob",
		Method:             "POST",
		PathPattern:        "/v1/jobs",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateJobReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateJobAccepted), nil
}

/*
DeleteJob Deletes a job specified by ID
*/
func (a *Client) DeleteJob(params *DeleteJobParams) (*DeleteJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "deleteJob",
		Method:             "DELETE",
		PathPattern:        "/v1/jobs/{id}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteJobReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteJobOK), nil
}

/*
GetJob Retrieves a job by ID
*/
func (a *Client) GetJob(params *GetJobParams) (*GetJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getJob",
		Method:             "GET",
		PathPattern:        "/v1/jobs/{id}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json", "text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobOK), nil
}

/*
UpdateJob update job API
*/
func (a *Client) UpdateJob(params *UpdateJobParams) (*UpdateJobAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "updateJob",
		Method:             "PATCH",
		PathPattern:        "/v1/jobs/{id}",
		ProducesMediaTypes: []string{"application/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateJobReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateJobAccepted), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
