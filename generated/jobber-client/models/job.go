package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Job job

swagger:model Job
*/
type Job struct {

	/* completed at
	 */
	CompletedAt *strfmt.DateTime `json:"completed_at,omitempty"`

	/* created at

	Required: true
	*/
	CreatedAt strfmt.DateTime `json:"created_at"`

	/* id

	Required: true
	*/
	ID ID `json:"id"`

	/* owner

	Required: true
	*/
	Owner string `json:"owner"`

	/* status

	Required: true
	*/
	Status JobStatus `json:"status"`

	/* tags
	 */
	Tags []Tag `json:"tags,omitempty"`

	/* type

	Required: true
	*/
	Type string `json:"type"`

	/* updated at

	Required: true
	*/
	UpdatedAt strfmt.DateTime `json:"updated_at"`
}

// Validate validates this job
func (m *Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", strfmt.DateTime(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateOwner(formats strfmt.Registry) error {

	if err := validate.RequiredString("owner", "body", string(m.Owner)); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateStatus(formats strfmt.Registry) error {

	if err := m.Status.Validate(formats); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := m.Tags[i].Validate(formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *Job) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

func (m *Job) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", strfmt.DateTime(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}
