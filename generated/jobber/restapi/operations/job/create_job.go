package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// CreateJobHandlerFunc turns a function with the right signature into a create job handler
type CreateJobHandlerFunc func(CreateJobParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateJobHandlerFunc) Handle(params CreateJobParams) middleware.Responder {
	return fn(params)
}

// CreateJobHandler interface for that can handle valid create job params
type CreateJobHandler interface {
	Handle(CreateJobParams) middleware.Responder
}

// NewCreateJob creates a new http.Handler for the create job operation
func NewCreateJob(ctx *middleware.Context, handler CreateJobHandler) *CreateJob {
	return &CreateJob{Context: ctx, Handler: handler}
}

/*CreateJob swagger:route POST /v1/jobs job createJob

CreateJob create job API

*/
type CreateJob struct {
	Context *middleware.Context
	Handler CreateJobHandler
}

func (o *CreateJob) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateJobParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
