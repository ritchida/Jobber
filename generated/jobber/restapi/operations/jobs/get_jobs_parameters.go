package jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"
	"github.com/go-swagger/go-swagger/httpkit/middleware"
	"github.com/go-swagger/go-swagger/swag"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewGetJobsParams creates a new GetJobsParams object
// with the default values initialized.
func NewGetJobsParams() GetJobsParams {
	var ()
	return GetJobsParams{}
}

// GetJobsParams contains all the bound params for the get jobs operation
// typically these are obtained from a http.Request
//
// swagger:parameters getJobs
type GetJobsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Determines the number of the most-recenly created jobs to query
	  In: query
	*/
	NumLatest *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetJobsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := httpkit.Values(r.URL.Query())

	qNumLatest, qhkNumLatest, _ := qs.GetOK("numLatest")
	if err := o.bindNumLatest(qNumLatest, qhkNumLatest, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetJobsParams) bindNumLatest(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("numLatest", "query", "int64", raw)
	}
	o.NumLatest = &value

	return nil
}
